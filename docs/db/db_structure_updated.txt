Datenbankstruktur (mit Begr체ndung)

Types of (Data Relationships used in MongoDB:
	* One-To-One
	* One-To-Many
	* Many-To-Many
	
Prim채re Verfahren f체r Relationships-Modelling in MongoDB:
0. Inserting (insert fields/information as it is)
1. Embedding
	* Take related data and insert it into the document
	* Ideal for one-to-many and many-to-many relationships
	+ Avoids application joins
	+ Provides better performance for read operations
	+ Simplifies queries
	+ Allows to update related data in a single write operation
	- Embedding may lead to large documents, (please note, that the max. available storage for a document is 16 MBs),
	which causes excessive memory and adds latency for reads resulting into slow application performance for the end customer.
	- Embedding allows unbouded documents, which can be infinitely added.
	Large & unbouded documents are anti-patterns in the Data Modelling.
2. Referencing
	* Refer to the documents in another collection in the document (linking or normalization)
	+ Simple and sufficient for most use cases
	+ No duplication of data
	+ Smaller documents
	- Need to join data from multiple documents, which may rise costs and reduce performance
	
Schl체sselkonzepte von Data Modelling in MongoDB ->
* Data accessed together should be stored together.
* Structure the data to match the ways that the application queries and updates it.

Optimum Efficiency sums up from
* Query result times
* Memory usage
* CPU usage
* Storage

Modelling

Now let us apply the finding on the API structure to translate into an efficient mongodb schema. From the first look, we see that
each tag and gateway has an config object, which pinpoints necessary meta info about them.

About Configs and Gateway/Tags:

Accessing/using tag/gateway configs without main objects does not make sense, therefore we obey the key concept of the MongoDB and place config fields and
main fields into one document. Also, we see from the structure, that config may change (by software updates etc.), thus we conclude one-to-one retaionship
between Tag - ConfigTag and Gateway ConfigGateway API objects. We will embed config objects into the gateway/tag documents to make it clear that some specific
fields relate to the config. Also, storing old configs for a gateway or a tag does not make a lot sence, so if a config will change, the old one will be overwritten.

About Relationship between Tag and Gateway:

Many tags can be simulteniously assigned to one gateway, which denotes classic one-to-many relationship between the objects. From documentation we know that we can
inspect a large number of tags, therefore embedding tags into the gateway collection may cause an unbounded gateway collection, which one of the main antipatterns in the MongoDB.
To avoid this, we will use referencing method to depict the relationship. To properly model the referencing method we need to conclude which types of queries are more meaningful for the enduser.
Based on the provided documentation, we know that a tag can be assigned only to one specific gateway at a time. Therefore querying the tags collection in order to find a specific gateway seems to be less useful than querying the gateways.
These thoughts lead us to link tags with a document from the gateways collection via an array containing referencing ids to the tags' documents. So we avoid unbouded documents and large gateway documents.

About Relationship between Sensors and Tags:

Based on the API, we cannot clearly identify sensors, since they don't have any queryable information/fields which would uniquely identify a sensor. However from the API, we know
which measuments were recorded by a specific tags. So, further when we mean Sensors, we will be using measurements. So, it is clear that between a Tag and measurements is a one-to-many relationship that
should be defined via Referencing to avoid large documents in the tag collection. A measurement document will be uniquely identified by the default _id automatically generated by MongoDB. Each document will contain therefore an _id, tag address
and all the custom fields which are given for specific measurement. We can't really define a whole set of "columns", since for every measure it will differ.